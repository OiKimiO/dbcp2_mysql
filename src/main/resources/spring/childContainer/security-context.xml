<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:s="http://www.springframework.org/schema/security"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd">
	
	<s:http auto-config="true" use-expressions="true">
		
		<!-- 권한 작성 방법
			1. 허용할 범위 -> 금지할 범위 순으로 정리
			  ** 이유 : 금지할 범위부터 설정하면 금지만 설정이 되기때문에 허용범위부터 설정할 것
			2. 권한 설명
			  ** permitAll     : 모두 접근 허용
			  ** isAnonymous() : 권한이 없는 익명의 사용자만 접근을 허용함(로그인 후 권한이 있으면 접근 불가)
			  ** hasRole()     : 해당 권한이 있으면 요청한 페이지를, 없으면 로그인 페이지로 이동
		 -->
		 
		<!-- 정적 리소스는 모두 접근 허용 -->		
		
		<s:intercept-url access="permitAll" pattern="/**"/>
		<s:intercept-url access="hasAnyRole('USER, ADMIN')" pattern="/main/**" />		
		<!-- <s:intercept-url access="permitAll" pattern="/**"/> -->
		
		<!-- 로그인된 상태에서는 로그인이나 회원가입 화면에 접근 못하도록 함 -->
		<!-- <s:intercept-url pattern="/loginView" access="isAnonymous()" />
		<s:intercept-url pattern="/registerUserView" access="isAnonymous()" /> -->
		
		<!-- 관리자페이지는 관리자만 접근 허용 -->
		<!-- <s:intercept-url pattern="/admin/**" access="hasRole('admin')" /> -->
		
		<!-- csrf 설정 -->
		<s:csrf disabled="false"/>
		<!-- <security:/> -->
		
		<!-- 로그인 처리 로직
			1. 로직 설명 
			  ** form의 action에 설정된 url의 처리가 servlet이 아닌 security에서 처리함
			  ** url의 처리가 controller(servlet)에서 이루어지는 것이 아니기때문에
			     form action에 대한 url을 따로 controller에서 설정할 필요가 없음
			  ** controller에서는 로그인 화면으로 이동하는 url만 작성하면 됨
			  ** 로그아웃 로직또한 로그인과 같음
		 -->
		<!-- 로그인 설정 -->
		<s:form-login	
			username-parameter="userId" 
			password-parameter="userPw"
			login-processing-url="/login/loginCheck" 
			login-page="/login/page" 		
			authentication-failure-handler-ref="userLoginFailHandler"
			authentication-success-handler-ref="userLoginSuccessHandler"
			/>

		<!-- 로그아웃 설정 -->
		<s:logout 
			logout-url="/logoutAsk"
			logout-success-url="/"
			invalidate-session="true"
			delete-cookies="true" />
			
		<!-- 권한이 없어서 금지된 URI 접속할 때 보여줄 페이지(403 에러 페이지 대체) 
		 	** 추후 로그인 권한이 없을때 접근할 페이지를 생성할 필요가 있음
		-->
		<s:access-denied-handler error-page="/error/error404" />
	</s:http>
	
	<!-- authentication-provider에 의존성 주입
	     1. 의존성을 주입하는 이유 (뭔가 이상한디;; ㅋㅋㅋ, 추후 수정)
	       ** user-service-ref 는 디폴트 Provider에게 커스터마이징한 UserDetailService를 주입하기 위한것
	         * authentication-provider에 의존성을 주입하면 userLoginService 클래스에서 
	       	   오버라이딩된 메서드의 리턴값을 통해 ID, PWD, 권한 데이터를 받을 수 있다.
	         * 의존성 주입을 하지않는다면 spring에서 제공하는 기본기능을 사용한다.	  
	 -->
	<!-- DB 연동 설정 -->	
	<s:authentication-manager>
		<s:authentication-provider ref="userLoginAuthenticationProvider" />
	</s:authentication-manager>
	
	<!-- 패스워드 단방향 암호화 -->
	<bean id="passwordEncoder"
		class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder"/>
	
	<!-- db연결 provider -->
	<!-- <bean id="userLoginAuthenticationProvider" class="com.eh.login.provider.UserLoginAuthenticationProvider"/> -->
	
	<!-- 로그인 실패 처리 -->
	<bean id="userLoginFailHandler" class="com.eh.login.handler.UserLoginFailHandler"/>
		
	<!-- 로그인 성공 처리 -->
	<bean id="userLoginSuccessHandler" class="com.eh.login.handler.UserLoginSuccessHandler"/>
</beans>